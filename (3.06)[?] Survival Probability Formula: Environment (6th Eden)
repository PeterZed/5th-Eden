/*
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

The probability calculation is of the form y = A / (B + C*e^(-Dx + E)) + F.
A and B adjust the value of the max asymptote. The max asymptote probability = A / B.
B also adjusts the y-axis intersection point. For 1 / (1 + e^-x), at x = 0, y = 1 / (B + 1). Thus,
by changing A and B together so long as A / B = 1, the probability at x = 0 can be raised or
lowered to make survival easier or more difficult.

C influences the y-intercept of the curve. The y-intercept = A / (B + C), so at C = 1 it's 0.5 prob.
Thus, C can be used to make survival more likely by setting C less than 1, or make it less likely
by setting C greater than 1.

D influences the slope of the curve. The steeper the slope, the fewer intermediate values exist.

E shifts the curve left when < 0 and right when > 0. Shifting the curve to the right improves
entities' survival probabilities.

F raises and lowers the whole curve; thus, F should stay equal to 0 or else I'll have to account
for correcting negative probabilities and probabilities greater than 1.0.

? These weights will change as I experiment and tweak them until the survival probabilities
"feel" correct. So, this will be happening for a long time, and (hopefully) can be accomplished
with player input.
*/
Entity.prototype.survivalProbEnviro = function(xLocal, yLocal) {
  var localCell = this.cell.localCells[yLocal][xLocal];
  // Entity's rad tolerance divided by the cell's radiation level
  var radRatio = this.attrs.enviro.radTolerance.level / localCells.conds.enviro.radiation.level;

  if (radRatio > 1) {
    radRatio = 1; // Because tolerance that exceeds the rad yields no further survival benefits
  }
  
  var optimalityRatios = 1;
  for (var cond in localCell.conds.enviroConds) {
    optimalityRatios *= Math.abs(localCell.enviroConds[cond].level -
      this.enviroAttrs[cond].level) / 100;
  }
  
  var condsRatio = radRatio * optimalityRatios; 
  var x = (condsRatio * 19.80688) - 9.90344; // Range 0 to -9.90344
  
  var weights = this.eden.survivalProbEnviro; // Shortens the reference to the values
  var a = weights.a, b = weights.b, c = weights.c, d = weights.d, e = weights.e, f = weights.f; 
  var enviroProb = a / (b + c * Math.pow(Math.E, ((d * x * -1) + e)) + f;
  
  return enviroProb;
};
