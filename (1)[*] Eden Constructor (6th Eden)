/*
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

The Eden constructor serves to build objects that serve as the game world. In here, information
that governs the mechanics of the world is found.
*/
function Eden(columns, rows) {
  this.name = "8th Eden";
  this.id = info.edens.count + 1;
  
  this.xAxis = columns;
  this.yAxis = rows;
  this.cellCount = 0;
  /*
  The game map is referred to as the "garden". It is an array of arrays, the nested arrays being
  rows of the garden and the outer indices being the columns.
  */
  this.garden = [];
  
  /*
  Variability is the world's standard deviation for expected difference from cell to cell for a
  given property. This is utilized whne the world is first initialized.
  */
  this.variability = {
    level: null,
    flux: null,
    dynamism: null,
    dynamismFlux: null
  };
  
  /*
  Meta dynamism is 100 * probability of a fluctuation occurring in the given cell's dynamism.
  It's related to the average number of turns expected to pass before this Eden's metaDynamism
  or metaDynamismFlux values undergo fluctuation.
  */
  this.metaDynamism = {
    level: null,
    flux: null,
    surge: 1
  };
  
  /*
  spontaneousEmergenceProb is the probability of an entity spontaneously emerging and spawning
  in the garden each tick. The purpose of this is so that the probability of the garden dying
  off completely and remaining empty will always be zero. Thus, there is always the chance,
  however small, of stability and equilibrium establishing within the garden.
  
  living is a Map of all presently alive entities within this garden. aliveCount is the number of
  presently living entities in the garden. deadCount is the number of entities that have perished
  in this garden.
  */
  this.entities = {
    spontaneousEmergenceProb: null,
    living: new Map(),
    aliveCount: 0,
    deadCount: 0,
    
    waste: {buildup: null, flux: null},
    hunger: {buildup: null, flux: null},
    thirst: {buildup: null, flux: null},
    injuries: {heal: null, flux: null}
  };
  
  this.turn = 1;
  
  /*
  These values affect the survival probability formula for entities in this world. The player can
  adjust them as they see fit. For now, these are the default values. However, as I gain experience
  with the worlds, I'll tweak them until I feel the default values are good for players to start.
  
  These are for the survival probability formula due to the entity's health.
  */
  this.survivalProbHealth = {a: 1, b: 1, c: 1, d: 1, e: 0, f: 0};
  
  /*
  These values affect the survival probability formula for entities in this world. The player can
  adjust them as they see fit. For now, these are the default values. However, as I gain experience
  with the worlds, I'll tweak them until I feel the default values are good for players to start.
  
  These are for the survival probability formula due to environmental variables.
  */
  this.survivalProbEnviro = {a: 1, b: 1, c: 1, d: 1, e: 0, f: 0};
};
