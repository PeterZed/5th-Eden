/*
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

The Eden constructor serves to build objects that serve as the game world. In here, information
that governs the mechanics of the world is found.
*/
function Eden(columns, rows, name) {
  this.name = name || "8th Eden"; // Takes 'name' argument, but if absent uses default
  this.id = info.edens.count + 1; // At +1 because base value is 0 Edens in existence
  
  this.xAxis = columns;
  this.yAxis = rows;
  this.cellCount = 0;
  /*
  The game map is referred to as the "garden". It is an array of arrays, the nested arrays being
  rows of the garden and the outer indices being the columns.
  */
  this.garden = [];
  
  /*
  Variability is the world's standard deviation for expected difference from cell to cell for a
  given property. This is utilized with Eden.prototype.gardenInit()
  */
  this.variability = {
    level: null,
    flux: null,
    dynamism: null,
    dynamismFlux: null
  };
  
  /*
  Meta dynamism is 100 * probability of a fluctuation occurring in the given cell's dynamism.
  It's related to the average number of turns expected to pass before this Eden's metaDynamism
  or metaDynamismFlux values undergo fluctuation.
  */
  this.metaDynamism = {
    level: null,
    flux: null,
    surge: 1
  };
  
  this.entities = {
    /*
    The probability of a new progenitor spontaneously spawning in the garden each tick. The purpose
    of this is so that the probability of the garden dying off completely and remaining empty will
    always be zero. Thus, there is always the chance, however small, of stability and equilibrium
    establishing within the garden.
    */
    spontaneousEmergenceProb: null,
    living: new Map(),  // A Map of all entities presently alive within this garden 
    alive: 0,  // The number of presently living entities in the garden
    deaths: 0,   // The number of times an entity has perished in this garden
    
    /*
    The 'buildup' and 'heal' are the mean change each tick for each and any entity's corresponding
    property. The 'flux' is the standard deviation.
    */
    waste: {buildup: null, flux: null},
    hunger: {buildup: null, flux: null},
    thirst: {buildup: null, flux: null},
    injuries: {heal: null, flux: null}
  };
  
  this.turn = 1;  // Keeps track of time's passage
  
  /*
  These values affect the survival probability formula for entities in this world. The player can
  adjust them as they see fit. For now, these are the default values. However, as I gain experience
  with the worlds, I'll tweak them until I feel the default values are good for players to start.
  
  These are for the survival probability formula due to the entity's health. The general equation:
  probability = A / (B + C*e^(-Dx + E)) + F.
  */
  this.survivalProbHealth = {a: 1, b: 1, c: 1, d: 1, e: 0, f: 0};
  
  /*
  These values affect the survival probability formula for entities in this world. The player can
  adjust them as they see fit. For now, these are the default values. However, as I gain experience
  with the worlds, I'll tweak them until I feel the default values are good for players to start.
  
  These are for the survival probability formula due to environmental variables. The general
  equation:
  probability = A / (B + C*e^(-Dx + E)) + F.
  */
  this.survivalProbEnviro = {a: 1, b: 1, c: 1, d: 1, e: 0, f: 0};
}
