/*
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

Used by every entity production method to create a new entity - whether that's by a new progenitor
spontaneously emerging, divinely creating a new progenitor, or an entity reproducing.

~ Need to fix the .level resetting that occurs at the end. Surely there's a solution.
*/
Eden.prototype.spawnEntity = function(xCoordinate, yCoordinate) {
  var targetCell = this.garden[yCoordinate][xCoordinate]; // The home cell for the entity's birth
  var targetEntity = new Entity(xCoordinate, yCoordinate);
  
  info.entities.essenceCount++; // Used in generating the entity's unique ID number
  info.entities.living.set(targetEntity.id, targetEntity);
  
  this.entities.living.set(targetEntity.id, targetEntity);
  this.alive++;
  
  targetCell.entities.set(targetEntity.id, targetEntity);
  
  /*
  By making it so the entity's .injuries = the world's .injuries instead of individually running
  through for each value, this ensures that changes to the world's values will also affect the
  entity, unless otherwise changed. Same for .thirst and .hunger.
  
  The .level values need to be reset, however, since they get wiped by this.
  */
  this.attributes.physicalState.injuries = this.eden.entities.injuries;
  this.attrs.physicalState.injuries.level = 0; // Since wiped due to the above
  this.attrs.physicalState.thirst = this.eden.entities.thirst;
  this.attrs.physicalState.thirst.level = 0; // Since wiped due to the above
  this.attrs.physicalState.hunger = this.eden.entities.hunger;
  this.attrs.physicalState.hunger.level = 0; // Since wiped due to the above
  
  targetEntity.generateName();
  
  return targetEntity;
};
