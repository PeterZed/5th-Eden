var edenMethods = {
    /*
    Starts everything needed for a game - creates the garden, populates it, runs the first turn,
    and then document.write() for every entity and cell.
    */
    initializeEden: function() {
        var start = new Date();
        this.formGarden();
        var end = new Date();
        var time = (end - start) / 1000;
        console.log(time + " seconds to form a 64x64 Garden.");
        // this.populate(1);
        divineMethods.information.detailAll();
        
        start = new Date();
        this.tick(1);
        end = new Date();
        time = (end - start) / 1000;
        console.log(time + " seconds to update 64 cells and do other stuff.");
        divineMethods.information.detailAll();
    },

      /*
    SPONTANEOUS ENTITY EMERGENCE is run each turn. If the chaos value is below the threshold 0.88%,
    an entity spawns in a random cell in the garden, as if entropy came together at random to form
    it, like the 2nd Eden. If an entity emerged this turn, the code is run again - a second might
    spawn in the same turn, or many more, though the odds are decidedly low.
    
    Values need to be tweaked - the expected number spawned over 100 turns is just 1, which might
    be too rare, especially if that value is expected to go down further with population or turn
    number. I'll have to see how easy it is to go through turns - a typical map might quickly reach
    a few thousand turns, who knows. So consider this a placeholder value.
    
    If the probability is high, spontaneous entity emergences will be rare, but frequent enough
    that many might be observed on a play-through. Perhaps the chances will go down as the 
    population increases, as if the presence of real entities disrupts the capacity for one to
    erupt from the Ã¦ther? Perhaps the chances go down as the turn number increases, as if Eden
    becomes more stable over time? Should not increase as turn increases, because this will disrupt
    older worlds, which might annoy players - plus there's no reasonable analogue for it. And if it
    went up as the population goes up, it would disrupt the equilibrium that forms - that might be
    desirable, but it'd also disrupt the simulation - maybe make it a
    possibility, but I think the first two options are the better picks currently.
    
    With the probability high, it isn't as special of an event, and so I'd rather leave it up to
    the player's own perception to notice its occurrence. I like the idea of that, making it a
    pleasant surprise. If the probability is low, though, it's very easy for a player to miss its
    occurrence, in which case maybe Caritas would call attention to it when it
    happens. On the other hand, it's not too bad either - kind of interesting actually - to have a
    mechanic that is rare to be noticed, makes it more special. Maybe give an
    option to alter the chance of spontaneous emergence.
    */
    spontaneousEntityEmergence: function() {
        var disorderThreshold = 0.0088;
        var chaos = Math.random();
        
        if (chaos <= disorderThreshold) {
            var xCoord = Math.floor(Math.random() * eden.x);
            var yCoord = Math.floor(Math.random() * eden.y);
            
            this.spawnProgenitor(xCoord, yCoord);
            this.spontaneousEntityEmergence();
        }
    },
    
    /*
    By making the calculationPhase separate from the movementPhase, it makes it so each entity's
    evaluations are based on the same state for the whole garden. If it iterated through each
    entity evaluating and then moving, the entities whose turns were executed later would have
    their actions influenced by what the earlier entities did, rather than every entity effectively
    moving simultaneously.
    */
    tick: function(num) {
        for (var i = 0; i < num; i++) {
            this.calculationPhase();
            this.movementPhase();
            this.battlePhase();
            this.survivalPhase();
            eden.turn++;
            this.conditionsFluctuationPhase();
            this.calculationPhase();
            this.reproductionPhase();
            this.spontaneousEntityEmergence();
        }
    },
    
    calculationPhase: function() {
        eden.entities.living.forEach(entityMethods.survivalOddsCalculation);
        eden.entities.living.forEach(entityMethods.battleOddsCalculation);
        eden.entities.living.forEach(entityMethods.overallOddsCalculation);
    },
    
    movementPhase: function() {
        eden.entities.living.forEach(entityMethods.move);
    },
    
    battlePhase: function() {
        edenMethods.gardenIteration(cellMethods.battle);
    },
    
    survivalPhase: function() {
        eden.entities.living.forEach(entityMethods.survival);
    },
    
    reproductionPhase: function() {
        eden.entities.living.forEach(entityMethods.reproductionDecision);
    },
    
    conditionsFluctuationPhase: function() {
        edenMethods.gardenIteration(cellMethods.conditionsFluctuation);
    }
};
