/*
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

Divides the sum of the values for the cell's initialized neighbors' conditions by the number of
neighbors that have been initialized. Does this for level, flux, dynamism, and dynamismFlux for
each condition property. Rounds to the hundredths place.
*/
Cell.prototype.localCondsAvg = function(initCount) {
  for (var cond in this.needsConds) {
    for (var prop in this.needsConds[cond]) {
      var targetCond = this.needsConds[cond][prop];
      
      targetCond.level = this.hundredthsRounding(targetCond.level / initCount)
      targetCond.flux = this.hundredthsRounding(targetCond.flux / initCount)
      
      targetCond.dynamism = this.hundredthsRounding(Math.round(targetCond.dynamism / initCount);
      targetCond.dynamismFlux = this.hundredthsRounding(targetCond.dynamismFlux / initCount);
    }
  }
  
  for (var cond in this.sensoryConds) {
    for (var prop in this.sensoryConds[cond]) {
      var targetCond = this.sensoryConds[cond][prop];
      
      targetCond.level = this.hundredthsRounding(targetCond.level / initCount)
      targetCond.flux = this.hundredthsRounding(targetCond.flux / initCount)
      
      targetCond.dynamism = this.hundredthsRounding(Math.round(targetCond.dynamism / initCount);
      targetCond.dynamismFlux = this.hundredthsRounding(targetCond.dynamismFlux / initCount);
    }
  }
  
  for (var cond in this.enviroConds) {
    for (var prop in this.enviroConds[cond]) {
      var targetCond = this.enviroConds[cond][prop];
      
      targetCond.level = this.hundredthsRounding(targetCond.level / initCount)
      targetCond.flux = this.hundredthsRounding(targetCond.flux / initCount)
      
      targetCond.dynamism = this.hundredthsRounding(Math.round(targetCond.dynamism / initCount);
      targetCond.dynamismFlux = this.hundredthsRounding(targetCond.dynamismFlux / initCount);
    }
  }
};
