/*
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
*/
class Property {
  constructor() {
  }
  
  decimalRounding(decimalPlace) {
    for (var aspect in this) { // Aspects are 
      if (this[aspect] instanceof Object) {
        for (var value in this[aspect]) {
          // Rounds the value in question to the nearest decimal place from the decimalPlace input.
          this[aspect][value] = Math.round(this[value] * Math.power(10, decimalPlace)) /
            Math.power(10, decimalPlace);
        }
      }
    }
  }
}

class Condition extends Property {
  constructor() {
    super();
  }
}
 
class CyclicalCondition extends Condition {
  constructor() {
    super();
    
    this.x = {level: null, flux: null, surge: 1,
      dynamism: null, dynamismFlux: null, dynamismSurge: 1};
    this.range = {level: null, flux: null, surge: 1,
      dynamism: null, dynamismFlux: null, dynamismSurge: 1};
    this.period = {level: null, flux: null, surge: 1,
      dynamism: null, dynamismFlux: null, dynamismSurge: 1};
    this.average = {level: null, flux: null, surge: 1,
      dynamism: null, dynamismFlux: null, dynamismSurge: 1};    
  }
  
  get level() {
    var level = this.range * Math.sin(this.period * this.x) + this.average;
  }
}

class AcyclicalCondition extends Condition {
  constructor() {
    super();
  }
}

class Attribute extends Property {
  constructor() {
    super();
  }
}

class MutableAttribute extends Attribute {
  constructor() {
    super();
  }
}

class PhysicalAttribute extends Attribute {
  constructor() {
    super();
  }
}
