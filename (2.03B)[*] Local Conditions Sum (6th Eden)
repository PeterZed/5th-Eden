/*
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

This method adds the referenced local cell's values for each condition's level, flux, dynamism, and
dynamismFlux to the current cells' values, thus summing the localCells' values.
*/
cell.prototype.localCondsSum = function(xLocal, yLocal) {
   var localCell = this.localCells[yLocal][xLocal];
   
   for (var cond in this.cyclicalConds) {
    for (var prop in this.cyclicalConds[cond]) {
      this.cyclicalConds[cond][prop].level += localCell[cond][prop].level;
      this.cyclicalConds[cond][prop].flux += localCell[cond][prop].flux;
      
      this.cyclicalConds[cond][prop].dynamism += localCell[cond][prop].dynamism;
      this.cyclicalConds[cond][prop].dynamismFlux += localCell[cond][prop].dynamismFlux;
    }
  }
  
  for (var cond in this.sensoryConds) {
    for (var prop in this.sensoryConds[cond]) {
      this.sensoryConds[cond][prop].level += localCell[cond][prop].level;
      this.sensoryConds[cond][prop].flux += localCell[cond][prop].flux;
      
      this.sensoryConds[cond][prop].dynamism += localCell[cond][prop].dynamism;
      this.sensoryConds[cond][prop].dynamismFlux += localCell[cond][prop].dynamismFlux;
    }
  }
  
  for (var cond in this.enviroConds) {
    for (var prop in this.enviroConds[cond]) {
      this.enviroConds[cond][prop].level += localCell[cond][prop].level;
      this.enviroConds[cond][prop].flux += localCell[cond][prop].flux;
      
      this.enviroConds[cond][prop].dynamism += localCell[cond][prop].dynamism;
      this.enviroConds[cond][prop].dynamismFlux += localCell[cond][prop].dynamismFlux;
    }
  }
};
