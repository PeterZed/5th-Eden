/*
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

This method adds the referenced local cell's values for each condition property's level, flux,
dynamism, and dynamismFlux to the current cell's values, thus summing the localCells' values.
*/
Cell.prototype.localCondsSum = function(xLocal, yLocal) {
   var localCell = this.localCells[yLocal][xLocal];
   
   for (var cond in this.needsConds) {
    for (var prop in this.needsConds[cond]) {
      var targetCond = this.needsConds[cond][prop];
    
      targetCond.level += localCell[cond][prop].level;
      targetCond.flux += localCell[cond][prop].flux;
      
      targetCond.dynamism += localCell[cond][prop].dynamism;
      targetCond.dynamismFlux += localCell[cond][prop].dynamismFlux;
    }
  }
  
  for (var cond in this.sensoryConds) {
    for (var prop in this.sensoryConds[cond]) {
      var targetCond = this.sensoryConds[cond][prop];
    
      targetCond.level += localCell[cond][prop].level;
      targetCond.flux += localCell[cond][prop].flux;
      
      targetCond.dynamism += localCell[cond][prop].dynamism;
      targetCond.dynamismFlux += localCell[cond][prop].dynamismFlux;
    }
  }
  
  for (var cond in this.enviroConds) {
    for (var prop in this.enviroConds[cond]) {
      var targetCond = this.enviroConds[cond][prop];
    
      targetCond.level += localCell[cond][prop].level;
      targetCond.flux += localCell[cond][prop].flux;
      
      targetCond.dynamism += localCell[cond][prop].dynamism;
      targetCond.dynamismFlux += localCell[cond][prop].dynamismFlux;
    }
  }
};
